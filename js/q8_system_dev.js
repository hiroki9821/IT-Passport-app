export const q8_system_dev = [
  {
    question: "ウォーターフォールモデルの特徴として最も適切なものはどれか。",
    choices: [
      "工程ごとに前段階を完了させてから次に進む",
      "仕様変更に柔軟に対応できる",
      "短期間でリリースを繰り返す",
      "開発と運用を同時に進める"
    ],
    answer: "工程ごとに前段階を完了させてから次に進む",
    explanation: "ウォーターフォールモデルは上流から下流に順次工程が流れる開発手法。"
  },
  {
    question: "アジャイル開発の特徴はどれか。",
    choices: [
      "短いサイクルで繰り返し開発し、変化に柔軟に対応できる",
      "全工程を一度に設計し最後にまとめてリリースする",
      "仕様変更が難しい",
      "必ず外注する"
    ],
    answer: "短いサイクルで繰り返し開発し、変化に柔軟に対応できる",
    explanation: "アジャイル開発は反復的・適応的に進め、顧客要望の変化に対応する。"
  },
  {
    question: "システム開発における“要件定義”の主な目的はどれか。",
    choices: [
      "利用者の要求や業務内容を明確にする",
      "プログラムをコーディングする",
      "テストデータを作成する",
      "運用マニュアルを作る"
    ],
    answer: "利用者の要求や業務内容を明確にする",
    explanation: "要件定義は開発の最初でニーズや制約を明確化する工程。"
  },
  {
    question: "システム設計で“論理設計”に該当するものはどれか。",
    choices: [
      "データベースのテーブル構造の設計",
      "サーバの設置場所を決める",
      "ケーブル配線の図面作成",
      "予算管理"
    ],
    answer: "データベースのテーブル構造の設計",
    explanation: "論理設計はデータや機能の論理的構造（DBや機能の関連）を定める工程。"
  },
  {
    question: "システム開発工程で“プログラム設計”で行う作業はどれか。",
    choices: [
      "詳細なアルゴリズムや処理手順を決める",
      "データベースのバックアップを取る",
      "OSをアップデートする",
      "ユーザー教育を実施する"
    ],
    answer: "詳細なアルゴリズムや処理手順を決める",
    explanation: "プログラム設計では個別プログラムの詳細な処理内容を設計する。"
  },
  {
    question: "システム開発において“単体テスト”の目的はどれか。",
    choices: [
      "個々のプログラムが仕様通りに動作するか検証する",
      "全体システムの動作確認をする",
      "業務ユーザーに使ってもらう",
      "ネットワーク接続を検証する"
    ],
    answer: "個々のプログラムが仕様通りに動作するか検証する",
    explanation: "単体テストはプログラム単位で正しく動作するかを確認する工程。"
  },
  {
    question: "システム開発で“結合テスト”の目的はどれか。",
    choices: [
      "複数のプログラムやモジュールの連携動作を確認する",
      "全体システムの性能を測定する",
      "DBのバックアップ方法を検討する",
      "業務フローの見直しをする"
    ],
    answer: "複数のプログラムやモジュールの連携動作を確認する",
    explanation: "結合テストは複数プログラム間の連携を検証する工程。"
  },
  {
    question: "システム開発で“総合テスト（システムテスト）”の目的はどれか。",
    choices: [
      "システム全体が要件どおりに動作するか確認する",
      "プログラムコードの可読性を上げる",
      "開発チームのスケジュール調整",
      "セキュリティ事故の記録"
    ],
    answer: "システム全体が要件どおりに動作するか確認する",
    explanation: "総合テストはシステム全体が仕様通り動くか検証する工程。"
  },
  {
    question: "システム開発において“運用テスト”を実施する目的はどれか。",
    choices: [
      "実際の運用環境で問題なく動作するかを確認する",
      "ユーザーからの要望を集める",
      "新機能のアイデア出し",
      "セキュリティルールを作成する"
    ],
    answer: "実際の運用環境で問題なく動作するかを確認する",
    explanation: "運用テストは実運用を想定して最終確認するテスト。"
  },
  {
    question: "プロトタイピングのメリットはどれか。",
    choices: [
      "利用者の意見を早期に取り入れやすい",
      "仕様変更ができなくなる",
      "開発コストが必ず削減できる",
      "全ての工程を一度で終わらせる"
    ],
    answer: "利用者の意見を早期に取り入れやすい",
    explanation: "プロトタイピングは試作品で利用者意見を素早く設計に反映できる。"
  },
  {
    question: "オブジェクト指向開発で“カプセル化”とはどのような考え方か。",
    choices: [
      "データや処理をオブジェクト内に隠ぺいし外部に公開しない",
      "処理を順番に実行する",
      "全てのデータをグローバル変数にする",
      "同じ処理を何度も繰り返す"
    ],
    answer: "データや処理をオブジェクト内に隠ぺいし外部に公開しない",
    explanation: "カプセル化はオブジェクトの内部構造を隠すことで保守性・安全性を高める。"
  },
  {
    question: "オブジェクト指向開発で“継承”とはどのような概念か。",
    choices: [
      "既存のクラスの機能を新しいクラスで引き継ぐ",
      "複数人で同時に開発する",
      "全ての変数をprivateにする",
      "処理を細かく分割する"
    ],
    answer: "既存のクラスの機能を新しいクラスで引き継ぐ",
    explanation: "継承は既存のクラスを元に新しいクラスを作り機能を受け継ぐこと。"
  },
  {
    question: "オブジェクト指向開発で“ポリモーフィズム（多態性）”の特徴はどれか。",
    choices: [
      "同じ命令でもオブジェクトごとに異なる動作を実現できる",
      "一つの処理しかできない",
      "必ず継承しなければならない",
      "クラス図を使わない"
    ],
    answer: "同じ命令でもオブジェクトごとに異なる動作を実現できる",
    explanation: "多態性は同じメソッド名でもクラスによって異なる動作ができること。"
  },
  {
    question: "システム開発で使用されるUMLの主な用途はどれか。",
    choices: [
      "システムの設計や構造を視覚的に表現する",
      "ネットワーク配線を記録する",
      "物理サーバの配置を決める",
      "バックアップファイルを作成する"
    ],
    answer: "システムの設計や構造を視覚的に表現する",
    explanation: "UMLはユースケース図やクラス図などで設計内容を図式化するための言語。"
  },
  {
    question: "テスト工程で“ブラックボックステスト”の特徴はどれか。",
    choices: [
      "内部の処理構造を考慮せず入力と出力で検証する",
      "プログラムの内部構造まで詳しく検証する",
      "プログラムの高速化を目指す",
      "セキュリティ事故を記録する"
    ],
    answer: "内部の処理構造を考慮せず入力と出力で検証する",
    explanation: "ブラックボックステストは、内部ロジックを見ずに動作だけで評価する方法。"
  },
  {
    question: "テスト工程で“ホワイトボックステスト”の特徴はどれか。",
    choices: [
      "プログラムの内部構造やロジックを詳細に検証する",
      "外部仕様だけで判定する",
      "利用者インタビューを実施する",
      "ネットワーク障害を検証する"
    ],
    answer: "プログラムの内部構造やロジックを詳細に検証する",
    explanation: "ホワイトボックステストはソースコードや制御構造まで詳しく検証する方法。"
  },
  {
    question: "ソフトウェアの“バージョン管理”の目的はどれか。",
    choices: [
      "プログラムの変更履歴を管理し複数人で安全に開発できるようにする",
      "ユーザーアカウントを管理する",
      "ハードウェアの故障を減らす",
      "データベースのパフォーマンスを向上する"
    ],
    answer: "プログラムの変更履歴を管理し複数人で安全に開発できるようにする",
    explanation: "バージョン管理は複数人開発や過去バージョンへの戻しなどに活用される。"
  },
  {
    question: "システム開発で使われる“Git”の特徴はどれか。",
    choices: [
      "分散型バージョン管理システムでありローカルでも管理可能",
      "クラウド専用のストレージである",
      "データベース専用ツールである",
      "ハードウェアの監視システムである"
    ],
    answer: "分散型バージョン管理システムでありローカルでも管理可能",
    explanation: "Gitは代表的な分散型バージョン管理ツール。"
  },
  {
    question: "システム開発で“CI（継続的インテグレーション）”の説明として適切なものはどれか。",
    choices: [
      "コードの変更を自動で統合・テストする仕組み",
      "ユーザー教育を定期的に実施すること",
      "サーバの自動バックアップ機能",
      "開発者会議の定期開催"
    ],
    answer: "コードの変更を自動で統合・テストする仕組み",
    explanation: "CIは自動ビルドや自動テストを繰り返し品質を高める仕組み。"
  },
  {
    question: "“DevOps”の考え方として正しいものはどれか。",
    choices: [
      "開発と運用が連携し素早いシステム提供を実現する",
      "開発と運用を完全に分離する",
      "テスト工程を省略する",
      "サーバ運用を外部委託する"
    ],
    answer: "開発と運用が連携し素早いシステム提供を実現する",
    explanation: "DevOpsは開発と運用が協力してシステム改善・高速リリースを目指す文化。"
  },
  {
    question: "“RAD（Rapid Application Development）”の特徴はどれか。",
    choices: [
      "開発を迅速に行うためにプロトタイピングやツールを活用する",
      "工程を厳密に管理する伝統的な開発モデルである",
      "すべての作業を手作業で行う",
      "要件定義に最も時間をかける"
    ],
    answer: "開発を迅速に行うためにプロトタイピングやツールを活用する",
    explanation: "RADはプロトタイピングや開発ツールを活用し短期間でシステムを構築する開発手法。"
  },
  {
    question: "“リファクタリング”の目的として適切なものはどれか。",
    choices: [
      "プログラムの内部構造を整理し可読性や保守性を高める",
      "機能追加を行う",
      "バグを必ず修正する",
      "ユーザーインターフェースを刷新する"
    ],
    answer: "プログラムの内部構造を整理し可読性や保守性を高める",
    explanation: "リファクタリングは動作を変えずにプログラムの品質を向上させる。"
  },
  {
    question: "“コーディング規約”を定める主な目的はどれか。",
    choices: [
      "複数人が統一した記法でソースコードを書くため",
      "プログラムの動作速度を必ず上げるため",
      "プロジェクトごとに仕様を全て変更するため",
      "コードレビューを省略するため"
    ],
    answer: "複数人が統一した記法でソースコードを書くため",
    explanation: "コーディング規約により可読性や品質の均一化が図れる。"
  },
  {
    question: "“バグ管理システム（バグトラッカー）”の主な役割はどれか。",
    choices: [
      "ソフトウェアの不具合や修正状況を管理する",
      "データベースのパフォーマンスを管理する",
      "ハードウェア障害を監視する",
      "コードの自動生成を行う"
    ],
    answer: "ソフトウェアの不具合や修正状況を管理する",
    explanation: "バグトラッカーは不具合報告や修正対応の状況を一元管理するツール。"
  },
  {
    question: "“テストケース”とは何か。",
    choices: [
      "テストのための具体的な条件や手順を記したもの",
      "サーバの障害履歴",
      "設計段階の資料",
      "運用マニュアル"
    ],
    answer: "テストのための具体的な条件や手順を記したもの",
    explanation: "テストケースは仕様通りに動くか確認するための具体的な試験項目。"
  },
  {
    question: "“リグレッションテスト（回帰テスト）”の目的はどれか。",
    choices: [
      "修正や機能追加後に既存機能に影響がないか確認する",
      "新機能だけをテストする",
      "初回リリースのみテストする",
      "利用者への説明を省略する"
    ],
    answer: "修正や機能追加後に既存機能に影響がないか確認する",
    explanation: "リグレッションテストは既存動作に不具合が発生していないかを検証する。"
  },
  {
    question: "“デバッグ”の説明として最も適切なものはどれか。",
    choices: [
      "プログラムの不具合を見つけて修正する作業",
      "ハードウェアのメンテナンス",
      "業務マニュアルの整備",
      "開発会議の開催"
    ],
    answer: "プログラムの不具合を見つけて修正する作業",
    explanation: "デバッグはプログラムのバグを検出・修正する作業全般を指す。"
  },
  {
    question: "“単体テスト”で使われるテストデータの特徴はどれか。",
    choices: [
      "プログラムの境界値や異常値も含めて用意する",
      "実際の運用データのみを使う",
      "開発者の氏名を入力する",
      "ランダムな文字列のみを使う"
    ],
    answer: "プログラムの境界値や異常値も含めて用意する",
    explanation: "単体テストでは様々な入力データでエラーや例外処理を検証する。"
  },
  {
    question: "“静的テスト”の特徴はどれか。",
    choices: [
      "プログラムを実行せずにソースコードや設計書を検証する",
      "システムを実際に動かして検証する",
      "性能試験を自動化する",
      "運用環境でのみ実施する"
    ],
    answer: "プログラムを実行せずにソースコードや設計書を検証する",
    explanation: "静的テストはプログラムを実行せずにレビューや分析を行う手法。"
  },
  {
    question: "“動的テスト”の説明として適切なものはどれか。",
    choices: [
      "プログラムを実際に動作させて検証する",
      "コードを静的解析ツールで検証する",
      "設計書をレビューする",
      "運用マニュアルを配布する"
    ],
    answer: "プログラムを実際に動作させて検証する",
    explanation: "動的テストは実際にプログラムを動かし、期待通りの動作か確認する方法。"
  },
  {
    question: "“結合テスト”のテストケース作成時に重視すべき観点はどれか。",
    choices: [
      "モジュール間のインタフェースやデータ連携の検証",
      "処理速度のみ",
      "エラーログの自動保存のみ",
      "ネットワーク機器の購入"
    ],
    answer: "モジュール間のインタフェースやデータ連携の検証",
    explanation: "結合テストでは連携部分の正しさ・データ授受の正確さを確認する。"
  },
  {
    question: "“受入テスト”の主な実施者は誰か。",
    choices: [
      "システム利用者（顧客）",
      "開発チームのみ",
      "インフラ担当者のみ",
      "営業部門"
    ],
    answer: "システム利用者（顧客）",
    explanation: "受入テストは納品前に顧客自身が要件どおり動作するか検証する工程。"
  },
  {
    question: "“フェーズレビュー”の説明として適切なものはどれか。",
    choices: [
      "開発の各工程の節目で成果物や進捗をチェックする",
      "コーディングのみを評価する",
      "運用のみを確認する",
      "テスト実施者の氏名を記録する"
    ],
    answer: "開発の各工程の節目で成果物や進捗をチェックする",
    explanation: "フェーズごとの品質・進捗をチェックし早期に問題を発見する。"
  },
  {
    question: "“要件定義工程”で最も重視すべきことはどれか。",
    choices: [
      "利用者の要求や業務内容を漏れなく把握する",
      "プログラム言語を決定する",
      "サーバの設置場所を決める",
      "テスト環境の構築"
    ],
    answer: "利用者の要求や業務内容を漏れなく把握する",
    explanation: "要件定義は利用者の要求や制約を明確化し仕様書に落とし込む工程。"
  },
  {
    question: "“外部設計”で決めることとして最も適切なものはどれか。",
    choices: [
      "画面や帳票の仕様、インターフェースなど利用者との接点部分",
      "詳細なアルゴリズム",
      "ネットワーク配線",
      "電源の容量"
    ],
    answer: "画面や帳票の仕様、インターフェースなど利用者との接点部分",
    explanation: "外部設計は画面・帳票・I/F等ユーザーが直接使う部分の仕様を定める。"
  },
  {
    question: "“内部設計”で主に決定する内容はどれか。",
    choices: [
      "プログラムやデータベースの内部構造や処理手順",
      "会社の経営理念",
      "開発チームの構成",
      "納期"
    ],
    answer: "プログラムやデータベースの内部構造や処理手順",
    explanation: "内部設計はプログラムやDBなどシステム内部の詳細設計を行う工程。"
  },
  {
    question: "“保守・運用設計”で重要な観点はどれか。",
    choices: [
      "障害発生時の対応手順やバックアップ方法を明確にする",
      "開発者の勤務時間を決める",
      "ユーザー数を減らす",
      "サーバ設置場所を決定する"
    ],
    answer: "障害発生時の対応手順やバックアップ方法を明確にする",
    explanation: "保守・運用設計は障害・トラブル発生時の対応や日常運用の手順を定める。"
  },
  {
    question: "“WBS（Work Breakdown Structure）”の役割はどれか。",
    choices: [
      "プロジェクト全体を細かい作業単位に分解し管理しやすくする",
      "ソフトウェアのバージョン番号を決める",
      "インターネットの速度を測定する",
      "全体作業を一つの大きな作業として管理する"
    ],
    answer: "プロジェクト全体を細かい作業単位に分解し管理しやすくする",
    explanation: "WBSは大きな作業を分割し進捗管理や責任分担を明確にする手法。"
  },
  {
    question: "“ガントチャート”の用途はどれか。",
    choices: [
      "作業工程や進捗を視覚的に管理・把握する",
      "ソースコードを自動生成する",
      "DBのバックアップを取る",
      "設計書をレビューする"
    ],
    answer: "作業工程や進捗を視覚的に管理・把握する",
    explanation: "ガントチャートは作業とスケジュールを図で表し進捗を管理する道具。"
  },
  {
    question: "“クリティカルパス”の説明として適切なものはどれか。",
    choices: [
      "プロジェクト完了までの最長経路となる作業の並び",
      "最短の開発期間",
      "ネットワークの最短経路",
      "保守担当者の連絡先"
    ],
    answer: "プロジェクト完了までの最長経路となる作業の並び",
    explanation: "クリティカルパスは遅れるとプロジェクト全体が遅延する重要な作業経路。"
  },
  {
    question: "“レビュー”の主な目的はどれか。",
    choices: [
      "設計書やプログラムなど成果物の品質を向上させる",
      "プロジェクトの費用を削減する",
      "納期を必ず短縮する",
      "利用者への教育を行う"
    ],
    answer: "設計書やプログラムなど成果物の品質を向上させる",
    explanation: "レビューは複数人でチェックし、誤りや問題点を早期に発見する。"
  },
  {
    question: "“コードレビュー”の実施効果として適切なものはどれか。",
    choices: [
      "プログラムのバグや設計ミスの早期発見",
      "サーバの障害防止",
      "業務マニュアルの作成",
      "ユーザーアカウントの統一"
    ],
    answer: "プログラムのバグや設計ミスの早期発見",
    explanation: "コードレビューによりバグや設計不備をリリース前に発見できる。"
  },
  {
    question: "“インスペクション”とはどのようなレビューか。",
    choices: [
      "正式な手順で行う厳格なレビュー",
      "非公式に行う簡易的なレビュー",
      "テストのみを対象にしたレビュー",
      "ユーザーアンケートによるレビュー"
    ],
    answer: "正式な手順で行う厳格なレビュー",
    explanation: "インスペクションは事前準備やチェックリストに基づく厳格なレビュー手法。"
  },
  {
    question: "“ウォークスルー”とはどのようなレビュー手法か。",
    choices: [
      "開発者自身が成果物の内容を説明し参加者が意見を出し合う",
      "厳格なルールに基づくレビュー",
      "テスト結果のみを評価する",
      "利用者のみによるチェック"
    ],
    answer: "開発者自身が成果物の内容を説明し参加者が意見を出し合う",
    explanation: "ウォークスルーは説明を通じて参加者全員で品質を高める。"
  },
  {
    question: "“パートナーシップ開発”の特徴はどれか。",
    choices: [
      "外部ベンダーと協力してシステムを共同開発する",
      "社内だけで完結する開発方式",
      "必ずクラウドサービスを利用する",
      "オープンソースのみを利用する"
    ],
    answer: "外部ベンダーと協力してシステムを共同開発する",
    explanation: "パートナーシップ開発は社外との連携により専門性やノウハウを活かす開発。"
  },
  {
    question: "“オフショア開発”の特徴はどれか。",
    choices: [
      "海外の開発拠点を活用することでコスト削減やリソース確保を図る",
      "全て国内で開発する方式",
      "運用をすべて外部委託する",
      "開発者が現場に常駐する"
    ],
    answer: "海外の開発拠点を活用することでコスト削減やリソース確保を図る",
    explanation: "オフショア開発は主に人件費や人材確保を目的に海外拠点を利用する手法。"
  },
  {
    question: "“システム開発委託契約”の契約形態の一つである“請負契約”の特徴はどれか。",
    choices: [
      "成果物の完成をもって報酬を支払う",
      "作業時間に応じて報酬を支払う",
      "人材派遣型である",
      "開発者を直接雇用する"
    ],
    answer: "成果物の完成をもって報酬を支払う",
    explanation: "請負契約は成果物納品が基準となり、受託側の裁量で進める。"
  },
  {
    question: "“準委任契約”の特徴はどれか。",
    choices: [
      "作業した時間や内容に応じて報酬を支払う",
      "成果物の完成を重視する",
      "プロジェクト単位で契約する",
      "必ず人材派遣を伴う"
    ],
    answer: "作業した時間や内容に応じて報酬を支払う",
    explanation: "準委任契約は作業ベースで管理し、成果物の完成責任を伴わない。"
  },
  {
    question: "“アジャイル開発”で代表的な手法はどれか。",
    choices: [
      "スクラム",
      "ウォーターフォールモデル",
      "プロトタイピング",
      "RAD"
    ],
    answer: "スクラム",
    explanation: "スクラムはアジャイル開発で最も普及している手法の一つ。"
  },
  {
    question: "“イテレーション”とはシステム開発においてどのような意味か。",
    choices: [
      "反復して設計・開発・テストを行う単位やサイクル",
      "一回限りの作業工程",
      "仕様の一斉凍結",
      "納品後のバージョン管理"
    ],
    answer: "反復して設計・開発・テストを行う単位やサイクル",
    explanation: "イテレーションはアジャイルでよく使われる反復型開発の単位。"
  },
  {
    question: "“ペアプログラミング”とはどのような開発手法か。",
    choices: [
      "2人1組で一つのプログラムを協力して作成する",
      "複数チームで並行開発する",
      "ペアでテストのみ行う",
      "担当者を入れ替えて開発する"
    ],
    answer: "2人1組で一つのプログラムを協力して作成する",
    explanation: "ペアプログラミングは1人がコーディング、もう1人がレビューや助言を行う手法。"
  },
  {
    question: "“リリース管理”で重視すべきことはどれか。",
    choices: [
      "リリース手順やスケジュールを明確化し、品質を確保する",
      "常に最新バージョンを配布する",
      "リリースごとに仕様を必ず変更する",
      "利用者の意見をすべて反映する"
    ],
    answer: "リリース手順やスケジュールを明確化し、品質を確保する",
    explanation: "リリース管理は手順と品質の安定化を図るために重要。"
  },
  {
    question: "“構成管理”の目的はどれか。",
    choices: [
      "システムの構成要素やバージョンを一元的に管理する",
      "開発者の勤務時間を管理する",
      "ハードウェア構成のみを管理する",
      "営業部門の人員を管理する"
    ],
    answer: "システムの構成要素やバージョンを一元的に管理する",
    explanation: "構成管理はシステム全体の資産や変更履歴を整理・把握する手法。"
  },
  {
    question: "“CMMI（能力成熟度モデル統合）”の目的はどれか。",
    choices: [
      "ソフトウェア開発プロセスの成熟度を評価・改善する",
      "ハードウェアの品質を高める",
      "人材育成を行う",
      "ネットワーク性能を測定する"
    ],
    answer: "ソフトウェア開発プロセスの成熟度を評価・改善する",
    explanation: "CMMIはプロセスの標準化・改善による品質向上を目指す。"
  },
  {
    question: "“PMBOK”の説明として正しいものはどれか。",
    choices: [
      "プロジェクトマネジメントの知識体系をまとめたガイド",
      "ソフトウェア開発の設計言語",
      "データベース管理の国際規格",
      "業務改善の指標"
    ],
    answer: "プロジェクトマネジメントの知識体系をまとめたガイド",
    explanation: "PMBOKはプロジェクト管理の国際標準となる知識体系。"
  },
  {
    question: "“ソフトウェアライフサイクル”における“運用・保守”フェーズで主に行うことはどれか。",
    choices: [
      "システムの障害対応や仕様変更、利用者サポート",
      "設計書の作成",
      "要件定義のみを行う",
      "コーディング作業のみ"
    ],
    answer: "システムの障害対応や仕様変更、利用者サポート",
    explanation: "運用・保守はシステム稼働後の対応や変更管理、利用者支援が主な内容。"
  },
  {
    question: "“ユースケース図”の目的として最も適切なものはどれか。",
    choices: [
      "システムの利用者（アクター）と機能の関係を図式化する",
      "サーバの物理構成を記録する",
      "DBのバックアップを設計する",
      "業務フローを表現する"
    ],
    answer: "システムの利用者（アクター）と機能の関係を図式化する",
    explanation: "ユースケース図はUMLで利用者と機能の関係を可視化するための図。"
  },
  {
    question: "“クラス図”で表現する内容として正しいものはどれか。",
    choices: [
      "クラスの属性や操作（メソッド）、関連を図式化する",
      "画面遷移の流れ",
      "システムのネットワーク構成",
      "データベースの物理設計"
    ],
    answer: "クラスの属性や操作（メソッド）、関連を図式化する",
    explanation: "クラス図はオブジェクト指向設計でクラス構造を表現する。"
  },
  {
    question: "“アクティビティ図”の特徴として最も適切なものはどれか。",
    choices: [
      "業務や処理の流れ（フロー）を図で表現する",
      "クラス間の継承関係を表す",
      "データベースのリレーションを示す",
      "ハードウェアの構成を示す"
    ],
    answer: "業務や処理の流れ（フロー）を図で表現する",
    explanation: "アクティビティ図は業務や処理の流れを図式化し、業務フローを明確にする。"
  },
  {
    question: "“シーケンス図”の目的として最も適切なものはどれか。",
    choices: [
      "オブジェクト間のメッセージのやり取りの順序を示す",
      "DBの構造を示す",
      "画面レイアウトを設計する",
      "開発工程の進捗を管理する"
    ],
    answer: "オブジェクト間のメッセージのやり取りの順序を示す",
    explanation: "シーケンス図は処理の流れとオブジェクト間のやり取りを時系列で図示する。"
  },
  {
    question: "“DFD（データフローダイアグラム）”の目的として最も適切なものはどれか。",
    choices: [
      "業務プロセスにおけるデータの流れと処理を図式化する",
      "サーバの物理構成を図示する",
      "ネットワーク配線を設計する",
      "開発者の作業計画を立てる"
    ],
    answer: "業務プロセスにおけるデータの流れと処理を図式化する",
    explanation: "DFDは業務やシステムのデータの流れと処理手順を図で表現する手法。"
  },
  {
    question: "“ER図（エンティティ・リレーションシップ図）”の用途として最も適切なものはどれか。",
    choices: [
      "データベースにおけるデータ同士の関係や構造を表現する",
      "ネットワーク機器の接続関係を図示する",
      "画面遷移を設計する",
      "ソフトウェア開発の進捗管理"
    ],
    answer: "データベースにおけるデータ同士の関係や構造を表現する",
    explanation: "ER図はDB設計でエンティティ（表）とリレーション（関係）を表現する図。"
  },
  {
    question: "“スパイラルモデル”の特徴として最も適切なものはどれか。",
    choices: [
      "リスク評価を繰り返しながら段階的にシステム開発を進める",
      "全工程を一度に完了する",
      "仕様変更ができない",
      "必ずウォーターフォールを使う"
    ],
    answer: "リスク評価を繰り返しながら段階的にシステム開発を進める",
    explanation: "スパイラルモデルはリスク評価と反復的開発を組み合わせた手法。"
  },
  {
    question: "“プロトタイピングモデル”の主な利点はどれか。",
    choices: [
      "利用者の要望を反映しやすくなる",
      "テスト工程が不要になる",
      "必ず短期間で開発できる",
      "仕様変更ができなくなる"
    ],
    answer: "利用者の要望を反映しやすくなる",
    explanation: "プロトタイピングモデルは試作品で要望を早期反映・仕様固めに役立つ。"
  },
  {
    question: "“リスクマネジメント”の説明として正しいものはどれか。",
    choices: [
      "開発に関わるリスクを特定・評価し対応策を決める活動",
      "ユーザー教育のみを実施する",
      "納品後のバージョンアップのみを管理する",
      "運用を外部委託する"
    ],
    answer: "開発に関わるリスクを特定・評価し対応策を決める活動",
    explanation: "リスクマネジメントはリスクの早期発見・対応策の実行が重要。"
  },
  {
    question: "“WBS（Work Breakdown Structure）”作成時のポイントはどれか。",
    choices: [
      "作業を細分化し、担当や期限を明確にする",
      "作業を大きな単位でまとめる",
      "管理者だけで作成する",
      "納品日だけを記載する"
    ],
    answer: "作業を細分化し、担当や期限を明確にする",
    explanation: "WBSは作業分割・担当割当て・期限明確化で管理を容易にする。"
  },
  {
    question: "“ベンチマーキング”の目的として最も適切なものはどれか。",
    choices: [
      "他社や他システムの優れた事例を参考に自社の改善に活かす",
      "システムを必ず自社内で作る",
      "コスト削減のみを目的とする",
      "利用者教育のために使う"
    ],
    answer: "他社や他システムの優れた事例を参考に自社の改善に活かす",
    explanation: "ベンチマーキングは他社事例比較を通じて業務改善を図る活動。"
  },
  {
    question: "“プロジェクト憲章”の説明として正しいものはどれか。",
    choices: [
      "プロジェクトの目的や範囲、責任者など基本事項を定める文書",
      "最終成果物の設計書",
      "システムのユーザーマニュアル",
      "費用見積書"
    ],
    answer: "プロジェクトの目的や範囲、責任者など基本事項を定める文書",
    explanation: "プロジェクト憲章は正式なスタートや体制決定の根拠となる。"
  },
  {
    question: "“クリティカルパス法（CPM）”の特徴はどれか。",
    choices: [
      "最長経路の作業を特定し納期管理を行う",
      "コストのみを重視する",
      "担当者の作業効率のみを測る",
      "ランダムに工程を決める"
    ],
    answer: "最長経路の作業を特定し納期管理を行う",
    explanation: "CPMは作業間の関係と最長工程を把握し遅延リスクを見積もる手法。"
  },
  {
    question: "“PERT図”の主な用途はどれか。",
    choices: [
      "作業工程の順序や所要時間を図式化しスケジュール管理する",
      "DB設計のために使う",
      "ネットワーク機器の構成図を描く",
      "ユーザーインタビューの内容を記録する"
    ],
    answer: "作業工程の順序や所要時間を図式化しスケジュール管理する",
    explanation: "PERT図はプロジェクト工程の流れや所要時間の見積もり管理に役立つ。"
  },
  {
    question: "“進捗管理”で重要なことはどれか。",
    choices: [
      "計画と実績を比較し遅れや問題点を早期に把握する",
      "予定は立てずに進める",
      "進捗は口頭でのみ報告する",
      "全作業を同時に進める"
    ],
    answer: "計画と実績を比較し遅れや問題点を早期に把握する",
    explanation: "進捗管理は工程遅れや課題を早期発見し対策することが要となる。"
  },
  {
    question: "“障害管理”で必須となる記録はどれか。",
    choices: [
      "発生した障害の内容、発生日時、原因、対応履歴など",
      "担当者の勤務時間",
      "納品日",
      "設計書のページ数"
    ],
    answer: "発生した障害の内容、発生日時、原因、対応履歴など",
    explanation: "障害管理は発生・原因・対応を正確に記録し再発防止につなげる。"
  },
  {
    question: "“品質管理”の目的として最も適切なものはどれか。",
    choices: [
      "システムや成果物が求められる品質基準を満たしているか確認する",
      "必ず開発費用を削減する",
      "全工程を短期間で終わらせる",
      "運用マニュアルを作る"
    ],
    answer: "システムや成果物が求められる品質基準を満たしているか確認する",
    explanation: "品質管理は基準に合致しているかを客観的に評価・維持する活動。"
  },
  {
    question: "“変更管理”の目的はどれか。",
    choices: [
      "システムへの仕様変更や改修内容を記録・管理し品質を保つ",
      "作業をすべて手作業で進める",
      "開発チームの人数を減らす",
      "DB設計を簡素化する"
    ],
    answer: "システムへの仕様変更や改修内容を記録・管理し品質を保つ",
    explanation: "変更管理は変更理由や内容を記録しトラブルや混乱を防ぐ。"
  },
  {
    question: "“リスク管理台帳”に記載すべき内容はどれか。",
    choices: [
      "リスクの内容、影響度、対策、発生状況など",
      "担当者の勤務状況",
      "開発費用の見積りのみ",
      "運用マニュアルの目次"
    ],
    answer: "リスクの内容、影響度、対策、発生状況など",
    explanation: "リスク管理台帳はリスクの特定・対応策を記録し管理する台帳。"
  },
  {
    question: "“スコープ管理”の目的はどれか。",
    choices: [
      "プロジェクトの作業範囲や目標を明確化し管理する",
      "コスト管理のみを行う",
      "担当者の人事評価",
      "開発言語の選定"
    ],
    answer: "プロジェクトの作業範囲や目標を明確化し管理する",
    explanation: "スコープ管理は作業の範囲や目的を定義し、逸脱を防止する活動。"
  },
  {
    question: "“ベースライン”の説明として最も適切なものはどれか。",
    choices: [
      "管理対象の仕様や計画の基準となる状態",
      "すべての変更点",
      "納品後の作業指示",
      "全工程の進捗表"
    ],
    answer: "管理対象の仕様や計画の基準となる状態",
    explanation: "ベースラインは品質・進捗などの評価時点の基準値を指す。"
  },
  {
    question: "“キックオフミーティング”の主な目的はどれか。",
    choices: [
      "プロジェクト開始時に関係者が集まり目的や計画を共有する",
      "テスト結果のみを確認する",
      "障害発生時の対応を決定する",
      "納品後の報告会"
    ],
    answer: "プロジェクト開始時に関係者が集まり目的や計画を共有する",
    explanation: "キックオフは全体方針や計画を関係者で確認する最初の会議。"
  },
  {
    question: "“ステークホルダー”の定義はどれか。",
    choices: [
      "プロジェクトやシステムに利害関係を持つすべての関係者",
      "プロジェクトマネージャだけ",
      "開発チームの外部協力者のみ",
      "運用保守担当者のみ"
    ],
    answer: "プロジェクトやシステムに利害関係を持つすべての関係者",
    explanation: "ステークホルダーは顧客・利用者・開発者・管理者など全ての関係者。"
  },
  {
    question: "“フィージビリティスタディ”の主な目的はどれか。",
    choices: [
      "プロジェクトの実現可能性や効果を事前に調査・評価する",
      "開発費用を確定させる",
      "設計書の改訂のみを行う",
      "テスト工程を省略する"
    ],
    answer: "プロジェクトの実現可能性や効果を事前に調査・評価する",
    explanation: "フィージビリティスタディは導入前に実現性・経済性などを評価する活動。"
  },
  {
    question: "“移行計画”の主な目的はどれか。",
    choices: [
      "新システムへの円滑な切り替え手順を計画・管理する",
      "現行システムを放置する",
      "データベースの物理構成を検討する",
      "プロジェクトメンバーの評価を決める"
    ],
    answer: "新システムへの円滑な切り替え手順を計画・管理する",
    explanation: "移行計画は現行→新システムの円滑な移行を安全・確実に行うための計画。"
  },
  {
    question: "“並行稼働”の目的として最も適切なものはどれか。",
    choices: [
      "新旧システムを一定期間同時に動かし問題発生時に備える",
      "開発費用を削減する",
      "テスト工程を省略する",
      "運用担当を交代する"
    ],
    answer: "新旧システムを一定期間同時に動かし問題発生時に備える",
    explanation: "並行稼働は新システム移行時のリスク軽減策として用いられる。"
  },
  {
    question: "“カットオーバー”の意味はどれか。",
    choices: [
      "新システムへ本番切り替えを行うこと",
      "サーバの電源を入れること",
      "開発チームを再編すること",
      "設計書を提出すること"
    ],
    answer: "新システムへ本番切り替えを行うこと",
    explanation: "カットオーバーは現行から新システムへの本番切り替えを指す用語。"
  },
  {
    question: "“ロールバック”の説明として最も適切なものはどれか。",
    choices: [
      "システム移行時のトラブル発生時に元の状態に戻すこと",
      "サーバのスペックを上げること",
      "データベースの設計を修正すること",
      "プログラムを再構築すること"
    ],
    answer: "システム移行時のトラブル発生時に元の状態に戻すこと",
    explanation: "ロールバックは移行失敗時などに安全に現行状態に戻す対応。"
  },
  {
    question: "“運用設計”で重要視されるものはどれか。",
    choices: [
      "運用手順・障害時対応・バックアップ方法などを明確にする",
      "開発者の勤務管理",
      "設計書の図面のみを作る",
      "営業報告を作成する"
    ],
    answer: "運用手順・障害時対応・バックアップ方法などを明確にする",
    explanation: "運用設計はシステム稼働後の運用・障害対応などを具体的に計画する。"
  },
  {
    question: "“SLA（サービスレベルアグリーメント）”の主な内容はどれか。",
    choices: [
      "サービスの品質・提供範囲・応答時間などを明文化した合意",
      "開発担当者の評価基準",
      "テストケースの作成方法",
      "契約金額のみ"
    ],
    answer: "サービスの品質・提供範囲・応答時間などを明文化した合意",
    explanation: "SLAはサービス提供者と利用者の間で品質・水準を合意した文書。"
  },
  {
    question: "“サービスデスク”の主な役割はどれか。",
    choices: [
      "システム利用者からの問合せや障害対応の窓口となる",
      "開発工程の管理",
      "営業会議の運営",
      "プログラムコードの作成"
    ],
    answer: "システム利用者からの問合せや障害対応の窓口となる",
    explanation: "サービスデスクはユーザー対応・障害受付・支援の中心的な役割。"
  },
  {
    question: "“インシデント管理”の目的はどれか。",
    choices: [
      "システム障害や問合せの発生から解決までの流れを一元管理する",
      "開発者の作業報告を集計する",
      "納品後の追加開発を行う",
      "契約内容を精査する"
    ],
    answer: "システム障害や問合せの発生から解決までの流れを一元管理する",
    explanation: "インシデント管理は障害や問合せの対応状況を記録・管理する活動。"
  },
  {
    question: "“構成管理台帳”に記載すべき内容はどれか。",
    choices: [
      "システムの構成要素やバージョン、変更履歴など",
      "担当者の勤務表",
      "契約書の写し",
      "テストケース一覧"
    ],
    answer: "システムの構成要素やバージョン、変更履歴など",
    explanation: "構成管理台帳は構成・バージョン・変更内容の一元管理に使われる。"
  },
  {
    question: "“変更管理プロセス”で行うべきことはどれか。",
    choices: [
      "変更要求の受付・評価・承認・実施・記録",
      "テスト実施のみ",
      "営業会議の議事録作成",
      "障害発生時の緊急連絡"
    ],
    answer: "変更要求の受付・評価・承認・実施・記録",
    explanation: "変更管理は要求を正確に受付け・記録し・評価・実施を適切に管理する。"
  },
  {
    question: "“キャパシティ管理”の目的はどれか。",
    choices: [
      "システムの能力（CPU・メモリ等）を計測し、将来の需要増加に備える",
      "契約金額を管理する",
      "プログラムの修正履歴を記録する",
      "サービス利用者数を制限する"
    ],
    answer: "システムの能力（CPU・メモリ等）を計測し、将来の需要増加に備える",
    explanation: "キャパシティ管理はシステムの性能や資源の適切な配分・拡張計画を立てる。"
  },
  {
    question: "“可用性管理”の説明として正しいものはどれか。",
    choices: [
      "システムが計画通りに利用できる状態を維持する活動",
      "契約内容を明文化する",
      "テスト手順を決める",
      "コストを削減する"
    ],
    answer: "システムが計画通りに利用できる状態を維持する活動",
    explanation: "可用性管理はシステムの安定稼働・ダウンタイム最小化を目指す活動。"
  },
  {
    question: "“バックアップポリシー”で決めるべき内容はどれか。",
    choices: [
      "バックアップの対象・頻度・保管方法・復元手順など",
      "担当者の勤務時間",
      "契約書の保管方法",
      "会議の議事録"
    ],
    answer: "バックアップの対象・頻度・保管方法・復元手順など",
    explanation: "バックアップポリシーは障害や災害時のデータ保護を目的に策定する。"
  },
  {
    question: "“テスト自動化”のメリットはどれか。",
    choices: [
      "繰り返しのテスト作業を効率化し品質を安定させる",
      "テスト作業を減らす",
      "手作業での確認だけを行う",
      "新規開発を省略できる"
    ],
    answer: "繰り返しのテスト作業を効率化し品質を安定させる",
    explanation: "テスト自動化は時間短縮と品質安定化の両面でメリットがある。"
  },
  {
    question: "“CIツール”が果たす役割として適切なものはどれか。",
    choices: [
      "ビルドやテストを自動化し継続的な品質管理を実現する",
      "開発者のシフト管理",
      "サーバのネットワーク構成変更",
      "ユーザー数の増減"
    ],
    answer: "ビルドやテストを自動化し継続的な品質管理を実現する",
    explanation: "CIツールはビルド・テストの自動化と品質維持をサポートする。"
  },
  {
    question: "“API（Application Programming Interface）”の主な役割はどれか。",
    choices: [
      "ソフトウェア同士の機能連携やデータ受け渡しを可能にする",
      "物理サーバの監視",
      "ハードウェアの温度管理",
      "プログラムの設計書を作る"
    ],
    answer: "ソフトウェア同士の機能連携やデータ受け渡しを可能にする",
    explanation: "APIは異なるソフトウェア間の機能連携を行うインターフェース。"
  },
  {
    question: "“マイクロサービスアーキテクチャ”の特徴はどれか。",
    choices: [
      "システム全体を複数の独立したサービスとして構築する",
      "単一の大規模なシステムのみで構成する",
      "必ずオフショア開発を伴う",
      "運用管理を外部委託する"
    ],
    answer: "システム全体を複数の独立したサービスとして構築する",
    explanation: "マイクロサービスは小さな独立サービス群で全体を構成しスケーラビリティを高める。"
  },
  {
    question: "“DevOps”の目指す効果はどれか。",
    choices: [
      "開発と運用の連携によるリリースの迅速化と品質向上",
      "開発と運用の完全な分離",
      "運用作業のすべての自動化",
      "開発者の数を増やす"
    ],
    answer: "開発と運用の連携によるリリースの迅速化と品質向上",
    explanation: "DevOpsは開発・運用の協業で素早いリリースと品質安定を実現する。"
  },
  {
    question: "“リファクタリング”を定期的に行う効果はどれか。",
    choices: [
      "プログラムの可読性や保守性が向上する",
      "システムの納期が延びる",
      "バグが必ず増える",
      "開発メンバーが減る"
    ],
    answer: "プログラムの可読性や保守性が向上する",
    explanation: "定期的なリファクタリングはソースコード品質の維持・向上に役立つ。"
  },
  {
    question: "“ユニットテスト”の主な対象はどれか。",
    choices: [
      "個々のモジュールや関数などプログラムの最小単位",
      "システム全体の動作",
      "データベースのバックアップ処理",
      "運用マニュアルの内容"
    ],
    answer: "個々のモジュールや関数などプログラムの最小単位",
    explanation: "ユニットテストは最小単位のモジュール単独で仕様どおり動くか検証する工程。"
  }
];