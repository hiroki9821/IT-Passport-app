export const q9_software_dev = [
  {
    question: "ウォーターフォールモデルの特徴はどれか。",
    choices: [
      "前工程が完了してから次工程に進む",
      "全工程を並行して進める",
      "利用者と常に仕様を見直す",
      "テスト工程を省略できる"
    ],
    answer: "前工程が完了してから次工程に進む",
    explanation: "ウォーターフォールモデルは要件定義→設計→実装→テスト→運用という流れで前工程が終わってから次へ進みます。"
  },
  {
    question: "アジャイル開発の特徴として適切なものはどれか。",
    choices: [
      "短い開発サイクルを繰り返し、変化に柔軟に対応する",
      "最初に全ての仕様を決めて変更を許さない",
      "設計工程を省略する",
      "納品後にだけテストを行う"
    ],
    answer: "短い開発サイクルを繰り返し、変化に柔軟に対応する",
    explanation: "アジャイル開発は反復的・漸進的に開発し、仕様変更にも柔軟に対応できるのが特徴です。"
  },
  {
    question: "プロトタイピングモデルの主な目的はどれか。",
    choices: [
      "試作品を作りながら利用者の要件を明確にする",
      "最初に全ての設計を完了させてから実装する",
      "テスト工程を簡略化する",
      "設計工程を省略する"
    ],
    answer: "試作品を作りながら利用者の要件を明確にする",
    explanation: "プロトタイピングモデルは試作品（プロトタイプ）を作成し、利用者と動作確認を繰り返しながら要件を明確にします。"
  },
  {
    question: "ソフトウェアライフサイクルの最初の工程はどれか。",
    choices: [
      "企画",
      "設計",
      "コーディング",
      "テスト"
    ],
    answer: "企画",
    explanation: "ソフトウェア開発のライフサイクルは、企画→要件定義→設計→開発→テスト→運用・保守の流れです。"
  },
  {
    question: "ソフトウェア要件定義の目的はどれか。",
    choices: [
      "利用者が求める機能や制約を明確にする",
      "テスト計画を立てる",
      "プログラムの設計を行う",
      "運用計画を立てる"
    ],
    answer: "利用者が求める機能や制約を明確にする",
    explanation: "要件定義では、利用者が必要とする機能や業務の要件、制約条件などを明確にします。"
  },
  {
    question: "基本設計（外部設計）で実施することはどれか。",
    choices: [
      "システム全体の構成や入出力仕様を定める",
      "モジュール単位の詳細な設計を行う",
      "運用手順を決める",
      "障害対応計画を作る"
    ],
    answer: "システム全体の構成や入出力仕様を定める",
    explanation: "基本設計では、システム全体の外部仕様（画面・帳票など）やインターフェース仕様を設計します。"
  },
  {
    question: "詳細設計で行うべき作業はどれか。",
    choices: [
      "各プログラムやモジュールの処理手順を決める",
      "要件をまとめる",
      "テスト計画を立てる",
      "運用マニュアルを作成する"
    ],
    answer: "各プログラムやモジュールの処理手順を決める",
    explanation: "詳細設計は、個々のプログラムやモジュールの内部構造や処理手順、データ構造を設計する工程です。"
  },
  {
    question: "コーディング工程の説明として正しいものはどれか。",
    choices: [
      "設計書に基づいてプログラムを記述する工程",
      "利用者の業務要件を聞き取る工程",
      "テスト手順書を作る工程",
      "保守作業を計画する工程"
    ],
    answer: "設計書に基づいてプログラムを記述する工程",
    explanation: "コーディングは、設計書の内容に従って実際にソースコードを記述する作業です。"
  },
  {
    question: "単体テストの主な目的はどれか。",
    choices: [
      "モジュール単位で仕様通りに動作するか確認する",
      "システム全体の業務要件を満たすか検証する",
      "複数のモジュールの連携を検証する",
      "運用環境での負荷検証を行う"
    ],
    answer: "モジュール単位で仕様通りに動作するか確認する",
    explanation: "単体テストは、個々のプログラムやモジュール単位でのバグや動作の確認を目的とします。"
  },
  {
    question: "結合テストの目的はどれか。",
    choices: [
      "モジュール同士の連携やインターフェースが正しく動作するか検証する",
      "単体でプログラムの動作確認をする",
      "運用時の業務シナリオを検証する",
      "ユーザー教育を実施する"
    ],
    answer: "モジュール同士の連携やインターフェースが正しく動作するか検証する",
    explanation: "結合テストは、複数のモジュールが組み合わさったときの連携やデータの受け渡しを確認する工程です。"
  },
  {
    question: "システムテストで主に行う作業はどれか。",
    choices: [
      "システム全体が要件通り動作するか検証する",
      "モジュール単体の動作検証をする",
      "設計書の記述をレビューする",
      "障害対応を計画する"
    ],
    answer: "システム全体が要件通り動作するか検証する",
    explanation: "システムテストは、開発したシステム全体が要件定義で定めた要求を満たしているかを確認する工程です。"
  },
  {
    question: "運用テストの主な目的はどれか。",
    choices: [
      "本番環境を想定した運用や業務の流れを検証する",
      "プログラムの内部処理を確認する",
      "設計工程の誤りを探す",
      "データベース設計を見直す"
    ],
    answer: "本番環境を想定した運用や業務の流れを検証する",
    explanation: "運用テストは、実際の業務運用に近い形でシステムが運用可能かを検証します。"
  },
  {
    question: "保守工程で最も該当する作業はどれか。",
    choices: [
      "障害修正や機能追加、仕様変更への対応",
      "システム構成の決定",
      "テスト手順書の作成",
      "画面設計の検討"
    ],
    answer: "障害修正や機能追加、仕様変更への対応",
    explanation: "保守工程はシステムの障害対応や機能追加、仕様変更など運用後の管理・改善作業を行います。"
  },
  {
    question: "リファクタリングの説明として最も適切なものはどれか。",
    choices: [
      "機能は変えずにプログラムの内部構造を整理・改善する",
      "機能追加を行うためプログラムを書き換える",
      "データベース設計をやり直す",
      "設計書の再作成を行う"
    ],
    answer: "機能は変えずにプログラムの内部構造を整理・改善する",
    explanation: "リファクタリングは外部仕様を変えずに内部構造や可読性・保守性を向上させることです。"
  },
  {
    question: "バージョン管理システムの主な目的はどれか。",
    choices: [
      "ソースコードの変更履歴やバージョンを管理する",
      "プロジェクトの予算管理を行う",
      "開発メンバーの勤怠を管理する",
      "外注先との契約管理を行う"
    ],
    answer: "ソースコードの変更履歴やバージョンを管理する",
    explanation: "バージョン管理はGitやSubversionなどを使ってソースの改変履歴や差分を管理することです。"
  },
  {
    question: "ソフトウェア開発における品質保証活動の一例はどれか。",
    choices: [
      "ソフトウェアのテスト計画とテスト実施",
      "設計工程の省略",
      "機能追加のみを繰り返す",
      "開発ドキュメントを作成しない"
    ],
    answer: "ソフトウェアのテスト計画とテスト実施",
    explanation: "品質保証にはテスト計画の策定、テストの実施、レビューなどが含まれます。"
  },
  {
    question: "ソフトウェア開発においてプロジェクトマネージャが最も重視すべきことはどれか。",
    choices: [
      "品質、コスト、納期（QCD）のバランスを取る",
      "設計書を全て自分で書く",
      "テストだけに専念する",
      "開発環境の選定のみを行う"
    ],
    answer: "品質、コスト、納期（QCD）のバランスを取る",
    explanation: "プロジェクトマネージャは品質、コスト、納期を最適化することが求められます。"
  },
  {
    question: "レビュー（査読）の目的はどれか。",
    choices: [
      "設計やプログラムなどの成果物の欠陥を早期に発見する",
      "テスト作業の負担を軽減するためだけに行う",
      "作業時間を短縮するためだけに行う",
      "予算消化のために行う"
    ],
    answer: "設計やプログラムなどの成果物の欠陥を早期に発見する",
    explanation: "レビューは設計やソースコードの問題点・不具合を開発初期で発見し修正コストを下げるために行います。"
  },
  {
    question: "デバッグ作業の目的はどれか。",
    choices: [
      "プログラムのバグや不具合を発見・修正する",
      "要件定義を見直す",
      "設計書を作り直す",
      "仕様変更を行う"
    ],
    answer: "プログラムのバグや不具合を発見・修正する",
    explanation: "デバッグはプログラムの不具合やエラーを発見し、修正する作業です。"
  },
  {
    question: "単体テストでよく用いられるテスト技法はどれか。",
    choices: [
      "ホワイトボックステスト",
      "ブラックボックステスト",
      "ユーザビリティテスト",
      "運用テスト"
    ],
    answer: "ホワイトボックステスト",
    explanation: "ホワイトボックステストはプログラム内部構造や論理を考慮してテストケースを作成する手法で、単体テストでよく使われます。"
  },
  {
    question: "ブラックボックステストの説明として適切なものはどれか。",
    choices: [
      "仕様や入力に基づき出力結果だけを評価するテスト",
      "プログラム内部のロジックを分析してテストする",
      "ユーザーの使いやすさを確認するテスト",
      "コードレビューをすること"
    ],
    answer: "仕様や入力に基づき出力結果だけを評価するテスト",
    explanation: "ブラックボックステストは、システムやモジュールの内部構造を考慮せずに、入力と出力に注目してテストします。"
  },
  {
    question: "ユースケース図で表現されるものはどれか。",
    choices: [
      "システムと利用者のやり取りの流れ",
      "システムの物理構成",
      "データベースの論理構造",
      "ネットワークのトポロジ"
    ],
    answer: "システムと利用者のやり取りの流れ",
    explanation: "ユースケース図は、利用者（アクター）とシステムのやり取り（ユースケース）を可視化します。"
  },
  {
    question: "テスト計画書に記載すべき内容として適切なものはどれか。",
    choices: [
      "テストの目的や範囲、担当、スケジュール",
      "プログラムの詳細な処理内容",
      "保守契約の内容",
      "営業活動の計画"
    ],
    answer: "テストの目的や範囲、担当、スケジュール",
    explanation: "テスト計画書には、何をどうテストするか、担当やスケジュールなどを明記します。"
  },
  {
    question: "静的テストの例として適切なものはどれか。",
    choices: [
      "プログラムコードのレビュー",
      "画面操作テスト",
      "負荷テスト",
      "シナリオテスト"
    ],
    answer: "プログラムコードのレビュー",
    explanation: "静的テストはプログラムを実行せずに行うもので、レビューや構文チェックなどが該当します。"
  },
  {
    question: "品質管理でPDCAサイクルの“D”に該当する活動はどれか。",
    choices: [
      "計画の実行",
      "計画の策定",
      "結果の確認",
      "是正処置"
    ],
    answer: "計画の実行",
    explanation: "DはDo（実行）。立てた計画を実行に移す段階です。"
  },
  {
    question: "開発工程でWBS（Work Breakdown Structure）が使われる目的はどれか。",
    choices: [
      "作業を分解して管理しやすくする",
      "要件定義の精度を高める",
      "プログラムの性能を測定する",
      "設計書のフォーマットを決める"
    ],
    answer: "作業を分解して管理しやすくする",
    explanation: "WBSは大きな作業を小さなタスクに分解し、管理・見積を容易にします。"
  },
  {
    question: "ソフトウェアの保守で「予防保守」と呼ばれるものはどれか。",
    choices: [
      "障害を未然に防ぐための修正や改善",
      "障害発生時の緊急対応",
      "新機能の追加",
      "法改正対応"
    ],
    answer: "障害を未然に防ぐための修正や改善",
    explanation: "予防保守は潜在的な不具合や劣化を予防するための活動です。"
  },
  {
    question: "リリース管理で最も重視すべき事項はどれか。",
    choices: [
      "リリース手順とリスク管理",
      "利用者の人数",
      "開発者の勤怠",
      "開発環境のバージョン"
    ],
    answer: "リリース手順とリスク管理",
    explanation: "リリース時は手順とリスク（障害発生時の対応策等）をしっかり管理する必要があります。"
  },
  {
    question: "CMMIでレベル1に該当する組織の特徴はどれか。",
    choices: [
      "プロセスが標準化されていない",
      "全てのプロセスが標準化されている",
      "定量的に管理されている",
      "最適化が進んでいる"
    ],
    answer: "プロセスが標準化されていない",
    explanation: "CMMIレベル1は「初期段階」で、プロセス管理が未熟な状態です。"
  },
  {
    question: "品質保証活動のうち“第三者による評価”として該当するものはどれか。",
    choices: [
      "監査",
      "単体テスト",
      "コーディング",
      "ユーザー教育"
    ],
    answer: "監査",
    explanation: "監査はプロジェクト外部の第三者が品質などを評価する活動です。"
  },
  {
    question: "バグトラッキングシステムの目的はどれか。",
    choices: [
      "ソフトウェアの不具合を記録・管理する",
      "開発者の進捗を管理する",
      "営業成績を記録する",
      "顧客の問い合わせを集計する"
    ],
    answer: "ソフトウェアの不具合を記録・管理する",
    explanation: "バグトラッキングシステム（BTS）はバグの発生状況や修正状況を一元管理します。"
  },
  {
    question: "プロジェクトのクリティカルパスとは何か。",
    choices: [
      "最も時間がかかる作業経路",
      "コストが最も高い作業",
      "担当者の多い工程",
      "ミーティングの回数"
    ],
    answer: "最も時間がかかる作業経路",
    explanation: "クリティカルパスは、プロジェクト全体の最短完了期間を決める重要な作業経路です。"
  },
  {
    question: "ユーザー受入テスト（UAT）の目的はどれか。",
    choices: [
      "利用者がシステムを受け入れるか最終確認する",
      "プログラムの内部構造をチェックする",
      "開発者の作業を評価する",
      "コードレビューを行う"
    ],
    answer: "利用者がシステムを受け入れるか最終確認する",
    explanation: "ユーザー受入テストは、利用者が業務要件を満たしているか最終判断するテストです。"
  },
  {
    question: "ソフトウェア開発で一般的に“進捗管理”のために用いられるものはどれか。",
    choices: [
      "ガントチャート",
      "ER図",
      "ネットワーク構成図",
      "データフロー図"
    ],
    answer: "ガントチャート",
    explanation: "ガントチャートはタスクと期間の進捗を一目で確認できる管理表です。"
  },
  {
    question: "レビューの種類で、参加者全員で議論しながら欠陥を探す方式はどれか。",
    choices: [
      "ウォークスルー",
      "インスペクション",
      "パスアラウンド",
      "デバッグ"
    ],
    answer: "ウォークスルー",
    explanation: "ウォークスルーは作成者が説明しながら全員で欠陥などを議論するレビューです。"
  },
  {
    question: "インスペクションの主な目的はどれか。",
    choices: [
      "設計書やコードの欠陥を体系的・厳密に検出する",
      "テスト結果をまとめる",
      "顧客との仕様打合せを行う",
      "見積書を作成する"
    ],
    answer: "設計書やコードの欠陥を体系的・厳密に検出する",
    explanation: "インスペクションは形式的なレビューで、ガイドラインに沿って欠陥を厳格に検出します。"
  },
  {
    question: "設計書の作成時に必要な“トレーサビリティ”とは何か。",
    choices: [
      "要件から設計・テストまで追跡できること",
      "ドキュメントのページ番号を揃えること",
      "設計書の枚数を減らすこと",
      "会議の記録を残すこと"
    ],
    answer: "要件から設計・テストまで追跡できること",
    explanation: "トレーサビリティは、要件が設計やテストケースにどのように反映されたか追跡できることを指します。"
  },
  {
    question: "障害管理で“インシデント”と呼ばれるものはどれか。",
    choices: [
      "想定外の事象や障害全般",
      "ユーザーの要望",
      "納期遅延",
      "仕様変更"
    ],
    answer: "想定外の事象や障害全般",
    explanation: "インシデントは、サービス停止やエラーなど想定外の障害を広く指す言葉です。"
  },
  {
    question: "「ベースライン」とは開発管理上どのような意味か。",
    choices: [
      "管理・比較の基準となる文書やソースコードの状態",
      "最低限の品質レベル",
      "最低価格の見積",
      "機能要件の下限"
    ],
    answer: "管理・比較の基準となる文書やソースコードの状態",
    explanation: "ベースラインは管理・比較の基準として固定した状態を指します。"
  },
  {
    question: "ソフトウェアの再利用（リユース）の主な効果はどれか。",
    choices: [
      "開発工数やコストの削減、品質向上",
      "設計作業の複雑化",
      "プロジェクト期間の延長",
      "バグの増加"
    ],
    answer: "開発工数やコストの削減、品質向上",
    explanation: "再利用可能な部品（モジュールやライブラリ）を使うことで効率的かつ高品質な開発が可能です。"
  },
  {
    question: "ITILの考え方で、サービスの運用管理に含まれないものはどれか。",
    choices: [
      "プロジェクト見積",
      "インシデント管理",
      "問題管理",
      "構成管理"
    ],
    answer: "プロジェクト見積",
    explanation: "ITILのサービス運用管理にはインシデント・問題・構成などの管理は含むが、見積は含まれません。"
  },
  {
    question: "スパイラルモデルの利点はどれか。",
    choices: [
      "リスクの低減を図りつつ反復的に開発できる",
      "開発期間を短縮できる",
      "要件定義が不要になる",
      "開発コストが必ず下がる"
    ],
    answer: "リスクの低減を図りつつ反復的に開発できる",
    explanation: "スパイラルモデルはリスク評価と反復開発を組み合わせて進めます。"
  },
  {
    question: "アジャイル開発で重視される価値観はどれか。",
    choices: [
      "変化への対応とコミュニケーション",
      "文書重視と手順厳守",
      "詳細な計画作成",
      "一度決めた仕様を守る"
    ],
    answer: "変化への対応とコミュニケーション",
    explanation: "アジャイル開発は変化への柔軟な対応や対話を重視します。"
  },
  {
    question: "デイリースクラムの目的として最も適切なものはどれか。",
    choices: [
      "チーム内で進捗と課題を共有する",
      "顧客との仕様交渉をする",
      "予算の調整をする",
      "ソフトウェアをリリースする"
    ],
    answer: "チーム内で進捗と課題を共有する",
    explanation: "デイリースクラムは進捗や課題を短時間で共有し合うアジャイル開発のミーティングです。"
  },
  {
    question: "プロジェクトマネージャの役割として正しいものはどれか。",
    choices: [
      "進捗やリスクを管理し、プロジェクト全体を統括する",
      "ソースコードの記述だけを担当する",
      "インフラ運用のみを担当する",
      "テスト担当者の教育のみを行う"
    ],
    answer: "進捗やリスクを管理し、プロジェクト全体を統括する",
    explanation: "プロジェクトマネージャは計画・進捗・品質・コスト・リスクを管理する責任者です。"
  },
  {
    question: "“ソースコードレビュー”の主な目的はどれか。",
    choices: [
      "バグや設計ミスの早期発見",
      "進捗の報告",
      "コスト削減のための交渉",
      "営業活動の計画"
    ],
    answer: "バグや設計ミスの早期発見",
    explanation: "コードレビューで設計や実装の誤りを早期に発見・修正できます。"
  },
  {
    question: "ソフトウェアの“モジュール化”の利点として適切なものはどれか。",
    choices: [
      "再利用性と保守性の向上",
      "テストの必要がなくなる",
      "プログラムサイズの増加",
      "バグの発見が難しくなる"
    ],
    answer: "再利用性と保守性の向上",
    explanation: "モジュール化により再利用・分業・保守が容易になります。"
  },
  {
    question: "回帰テストの主な目的はどれか。",
    choices: [
      "修正による副作用がないか確認する",
      "負荷に対する耐性を測定する",
      "新しい機能を追加する",
      "画面設計を見直す"
    ],
    answer: "修正による副作用がないか確認する",
    explanation: "回帰テストは修正や機能追加が他部分に悪影響を与えていないか検証します。"
  },
  {
    question: "“マイルストーン”とはプロジェクト管理上、どのようなものか？",
    choices: [
      "重要な進捗の節目となる目標・日付",
      "最終成果物のこと",
      "費用の合計額",
      "チームメンバーの人数"
    ],
    answer: "重要な進捗の節目となる目標・日付",
    explanation: "マイルストーンは、設計完了・テスト完了などプロジェクトの進捗管理で重要な節目となるものです。"
  },
  {
    question: "“リスクアセスメント”で行う作業はどれか。",
    choices: [
      "リスクの洗い出しと評価",
      "プロジェクト計画の詳細化",
      "コストの見積",
      "品質保証体制の決定"
    ],
    answer: "リスクの洗い出しと評価",
    explanation: "リスクアセスメントでは想定されるリスクを洗い出し、発生確率や影響を評価します。"
  },
  {
    question: "“工程管理”で実施することとして適切なものはどれか。",
    choices: [
      "作業ごとの進捗・納期・品質の管理",
      "設計書の校正",
      "製品の営業活動",
      "保守契約の交渉"
    ],
    answer: "作業ごとの進捗・納期・品質の管理",
    explanation: "工程管理は、タスクごとの進捗や品質・納期などを管理することです。"
  },
  {
    question: "品質管理の“是正処置”に該当するものはどれか。",
    choices: [
      "問題が発生した原因を究明し、再発防止策を講じる",
      "仕様通りに作業を進める",
      "作業手順を変更せずに続ける",
      "設計書を配布する"
    ],
    answer: "問題が発生した原因を究明し、再発防止策を講じる",
    explanation: "是正処置は再発防止・問題解決のための対応策を意味します。"
  },
  {
    question: "“結合テスト”の目的はどれか。",
    choices: [
      "複数モジュール間のインターフェースや連携の動作を確認する",
      "個々の機能が単独で正しく動くか確認する",
      "全体として業務要件を満たすか確認する",
      "利用者によるシステム評価を行う"
    ],
    answer: "複数モジュール間のインターフェースや連携の動作を確認する",
    explanation: "結合テストは複数モジュールを連携させた時の正しさを検証します。"
  },
  {
    question: "“単体テスト”の特徴はどれか。",
    choices: [
      "プログラム単位でのテストである",
      "業務全体の流れを確認する",
      "ユーザー操作の検証が中心",
      "リリース後の運用テストである"
    ],
    answer: "プログラム単位でのテストである",
    explanation: "単体テストは、最小単位（関数・モジュールなど）ごとに正しく動作するかを確認します。"
  },
  {
    question: "“保守性”に優れたシステムの特徴はどれか。",
    choices: [
      "変更や修正が容易にできる",
      "障害が発生しやすい",
      "管理工数が膨大になる",
      "ユーザーが操作できない"
    ],
    answer: "変更や修正が容易にできる",
    explanation: "保守性が高い＝トラブル時や仕様変更に迅速・容易に対応できる。"
  },
  {
    question: "“品質保証”の活動でないものはどれか。",
    choices: [
      "テストデータの削除",
      "工程ごとの品質確認",
      "標準化の推進",
      "欠陥報告の管理"
    ],
    answer: "テストデータの削除",
    explanation: "品質保証はプロセスや成果物の品質確保を目指す。データ削除は該当しません。"
  },
  {
    question: "ソフトウェア開発において“進捗遅延”を早期に検知するために有効なものはどれか。",
    choices: [
      "定期的な進捗会議と報告",
      "運用テスト",
      "運用マニュアルの作成",
      "顧客との面談"
    ],
    answer: "定期的な進捗会議と報告",
    explanation: "進捗会議や進捗報告で遅延リスクを早期発見できます。"
  },
  {
    question: "“保守契約”でSLA（サービスレベル合意）を設定する主な目的はどれか。",
    choices: [
      "サービス品質の基準を明確にする",
      "契約期間を延長する",
      "ソースコードの保護",
      "開発言語の統一"
    ],
    answer: "サービス品質の基準を明確にする",
    explanation: "SLAは応答時間や稼働率などサービス品質の合意を文書化します。"
  },
  {
    question: "“プログラムの可読性”が高いとはどのような状態か。",
    choices: [
      "他人が理解しやすい構造と記述になっている",
      "短い行数で記述されている",
      "コメントが一切ない",
      "関数名が省略されている"
    ],
    answer: "他人が理解しやすい構造と記述になっている",
    explanation: "可読性が高いコードは第三者にも理解しやすく、保守性向上にも寄与します。"
  },
  {
    question: "“障害管理”で障害記録（障害票）に含まれない項目はどれか。",
    choices: [
      "開発者の私的な感想",
      "発生日時",
      "障害内容",
      "対応履歴"
    ],
    answer: "開発者の私的な感想",
    explanation: "障害票は客観的事実や対応経緯のみを記載し、主観的感想は含めません。"
  },
  {
    question: "“設計レビュー”の主な目的はどれか。",
    choices: [
      "設計ミスや漏れを早期に発見する",
      "納期を早めるための調整",
      "プログラムの実行速度を計測する",
      "利用者マニュアルを作成する"
    ],
    answer: "設計ミスや漏れを早期に発見する",
    explanation: "設計段階でのレビューにより、ミスや仕様抜けを早期発見し後工程の手戻りを防ぐ。"
  },
  {
    question: "“テスト計画”を策定する目的はどれか。",
    choices: [
      "テスト範囲や手順、責任分担を明確にする",
      "システム設計を完了させる",
      "プログラムコードの作成を始める",
      "進捗会議を行う"
    ],
    answer: "テスト範囲や手順、責任分担を明確にする",
    explanation: "テスト計画は品質保証の一環として重要な文書です。"
  },
  {
    question: "“ソフトウェアライフサイクル”に含まれない工程はどれか。",
    choices: [
      "ハードウェア製造",
      "要件定義",
      "設計",
      "運用・保守"
    ],
    answer: "ハードウェア製造",
    explanation: "ソフトウェアライフサイクルは開発から運用・廃棄まで。ハード製造は含まれません。"
  },
  {
    question: "“ユースケース”は主にどの工程で利用されるか。",
    choices: [
      "要件定義",
      "プログラムコーディング",
      "ハード設計",
      "障害対応"
    ],
    answer: "要件定義",
    explanation: "ユースケースは利用者視点でシステムの機能要件を整理する手法です。"
  },
  {
    question: "“外部設計”で定義する内容はどれか。",
    choices: [
      "システムの入出力や操作画面、帳票など",
      "メモリ管理方法",
      "プログラムの詳細ロジック",
      "ネットワーク配線"
    ],
    answer: "システムの入出力や操作画面、帳票など",
    explanation: "外部設計はユーザーインターフェースやI/Oなど利用者側の仕様を明確にします。"
  },
  {
    question: "“内部設計”で詳細化する項目はどれか。",
    choices: [
      "プログラム構造やデータベース設計",
      "企業理念",
      "ユーザーの操作手順",
      "会計監査の手法"
    ],
    answer: "プログラム構造やデータベース設計",
    explanation: "内部設計はシステム構造や各モジュール・DBの詳細仕様を策定します。"
  },
  {
    question: "“ソフトウェアテスト”で“ブラックボックステスト”の説明として正しいものはどれか。",
    choices: [
      "入力と出力のみを評価する",
      "内部構造に着目する",
      "プログラムを修正する",
      "運用中の障害を検出する"
    ],
    answer: "入力と出力のみを評価する",
    explanation: "ブラックボックステストは内部処理を意識せず、外部からの動作確認を行います。"
  },
  {
    question: "“ホワイトボックステスト”の特徴はどれか。",
    choices: [
      "内部構造を意識してテストする",
      "ユーザー視点でのみ確認する",
      "操作マニュアルを作成する",
      "仕様書を配布する"
    ],
    answer: "内部構造を意識してテストする",
    explanation: "ホワイトボックステストは、制御構造や分岐網羅など内部構造を対象とする。"
  },
  {
    question: "“ソフトウェアの品質特性”に含まれないものはどれか。",
    choices: [
      "画面デザインの美しさ",
      "機能性",
      "信頼性",
      "保守性"
    ],
    answer: "画面デザインの美しさ",
    explanation: "品質特性は機能性、信頼性、保守性など。見た目の美しさは含まれません。"
  },
  {
    question: "“レビュー指摘”の有効な運用方法はどれか。",
    choices: [
      "指摘内容を記録・共有し、改善を促す",
      "各自の裁量にまかせる",
      "担当外にのみ伝える",
      "作業後に削除する"
    ],
    answer: "指摘内容を記録・共有し、改善を促す",
    explanation: "レビュー指摘は記録・共有して次の品質向上や再発防止に役立てる。"
  },
  {
    question: "“設計書のバージョン管理”の目的はどれか。",
    choices: [
      "変更履歴や最新版の管理を行う",
      "設計書を印刷するため",
      "運用手順を記載するため",
      "テスト仕様書の作成"
    ],
    answer: "変更履歴や最新版の管理を行う",
    explanation: "設計書のバージョン管理により、誰が・いつ・どのように変更したか追跡可能です。"
  },
  {
    question: "“工数見積り”の目的はどれか。",
    choices: [
      "開発や保守に必要な作業量を算定する",
      "テスト結果の評価",
      "要件の優先順位付け",
      "契約書の作成"
    ],
    answer: "開発や保守に必要な作業量を算定する",
    explanation: "工数見積りはリソース配分や納期・コスト管理の基礎となります。"
  },
  {
    question: "“ソフトウェア保守”に含まれないものはどれか。",
    choices: [
      "新規機能の追加開発",
      "障害修正",
      "法改正対応",
      "性能改善"
    ],
    answer: "新規機能の追加開発",
    explanation: "保守は主に修正や改善。新規開発は通常“保守”とは呼びません。"
  },
  {
    question: "“ベータテスト”とはどのようなものか。",
    choices: [
      "一般ユーザーに公開し、実利用環境で動作確認するテスト",
      "開発担当者のみで行う内部テスト",
      "ソースコードの静的解析",
      "設計段階の評価"
    ],
    answer: "一般ユーザーに公開し、実利用環境で動作確認するテスト",
    explanation: "ベータテストは本番環境に近い実ユーザーで不具合発見を狙う。"
  },
  {
    question: "“障害対応手順書”の目的はどれか。",
    choices: [
      "障害発生時の迅速な対応と再発防止",
      "設計仕様の決定",
      "新規開発の優先順位付け",
      "営業方針の策定"
    ],
    answer: "障害発生時の迅速な対応と再発防止",
    explanation: "障害対応手順書に従い、誰でも同じ対応が取れるようにする。"
  },
  {
    question: "“ソフトウェアの信頼性”を高める手法として適切なものはどれか。",
    choices: [
      "冗長化やエラー処理の強化",
      "外部設計を簡略化する",
      "テスト工数を減らす",
      "コメントを削除する"
    ],
    answer: "冗長化やエラー処理の強化",
    explanation: "冗長化や適切な例外処理で障害時の信頼性を高めることができます。"
  },
  {
    question: "“リグレッションテスト”の実施タイミングとして最も適切なものはどれか。",
    choices: [
      "修正や追加開発を行った後",
      "要件定義時",
      "設計書作成後",
      "運用開始前のみ"
    ],
    answer: "修正や追加開発を行った後",
    explanation: "リグレッション（回帰）テストは修正・追加後に副作用を検証するものです。"
  },
  {
    question: "“WBS（Work Breakdown Structure）”の説明として最も適切なものはどれか。",
    choices: [
      "作業を階層的に分割して管理する手法",
      "プログラムの詳細設計書",
      "障害票の一覧",
      "納品物の検査基準"
    ],
    answer: "作業を階層的に分割して管理する手法",
    explanation: "WBSはプロジェクトを細かなタスクに分割して工程管理を行う方法です。"
  },
  {
    question: "“ガントチャート”の利用目的はどれか。",
    choices: [
      "プロジェクトの進捗や工程のスケジュールを可視化する",
      "システムの性能を計測する",
      "障害の記録を行う",
      "要件定義書を作成する"
    ],
    answer: "プロジェクトの進捗や工程のスケジュールを可視化する",
    explanation: "ガントチャートは工程ごとのスケジュールや進捗を棒グラフで表現します。"
  },
  {
    question: "“クリティカルパス”とはどのような意味か。",
    choices: [
      "プロジェクト最短完了のために遅延できない作業経路",
      "開発担当者が最も重要視するドキュメント",
      "最初に実施するタスクのこと",
      "進捗報告の書式"
    ],
    answer: "プロジェクト最短完了のために遅延できない作業経路",
    explanation: "クリティカルパス上の遅延はプロジェクト全体の遅れにつながります。"
  },
  {
    question: "“進捗管理”に利用される管理指標はどれか。",
    choices: [
      "出来高・予定・実績・遅延など",
      "設計書のバージョン数",
      "画面レイアウトの種類",
      "ネットワーク帯域幅"
    ],
    answer: "出来高・予定・実績・遅延など",
    explanation: "進捗管理では実績・計画との差分や出来高を指標とします。"
  },
  {
    question: "“ソフトウェア品質保証（SQA）”の主な役割はどれか。",
    choices: [
      "開発プロセス全体の品質管理・改善を推進する",
      "プログラムの動作速度を高める",
      "顧客との打ち合わせを代行する",
      "障害対応マニュアルを作成する"
    ],
    answer: "開発プロセス全体の品質管理・改善を推進する",
    explanation: "SQAは計画的・組織的に品質確保と改善活動を推進する部門・活動。"
  },
  {
    question: "“構成管理”の主な目的はどれか。",
    choices: [
      "成果物やバージョン、変更内容を一元管理する",
      "従業員の出勤状況を管理する",
      "営業戦略を決める",
      "ネットワーク設計を最適化する"
    ],
    answer: "成果物やバージョン、変更内容を一元管理する",
    explanation: "構成管理はソースや設計書、バージョン等を整然と管理し品質・進捗の追跡性を担保する。"
  },
  {
    question: "“アジャイル開発”の説明として適切なものはどれか。",
    choices: [
      "短期間で反復しながら柔軟に開発を進める",
      "一括して仕様を決める手法",
      "設計のみを重視する手法",
      "納品物を最初に全て定義する"
    ],
    answer: "短期間で反復しながら柔軟に開発を進める",
    explanation: "アジャイルは変化に柔軟対応しつつ反復的に開発する現代的手法です。"
  },
  {
    question: "“プロトタイピングモデル”の特徴はどれか。",
    choices: [
      "試作品を早期に作り利用者の意見を取り入れる",
      "開発工程を全て省略する",
      "ドキュメント作成のみを重視する",
      "最終成果物だけを重視する"
    ],
    answer: "試作品を早期に作り利用者の意見を取り入れる",
    explanation: "プロトタイピングはユーザーと試作を通じて要件の明確化を図る手法。"
  },
  {
    question: "“デイリースクラム”の主な目的はどれか。",
    choices: [
      "チーム内の進捗共有と課題の早期発見",
      "全体会議を開くため",
      "納期遅れを報告するため",
      "顧客に成果物を納品するため"
    ],
    answer: "チーム内の進捗共有と課題の早期発見",
    explanation: "アジャイル開発のスクラムでは短い立ち会いミーティングが進捗と課題の可視化に役立つ。"
  },
  {
    question: "“スプリント”とはアジャイル開発で何を指すか。",
    choices: [
      "反復的な開発期間（1〜4週間など）",
      "全体の開発期間",
      "チームの人数",
      "バグの数"
    ],
    answer: "反復的な開発期間（1〜4週間など）",
    explanation: "スプリントは短い期間で開発→評価→改善を繰り返す単位です。"
  },
  {
    question: "“バーンダウンチャート”の利用目的はどれか。",
    choices: [
      "残作業量の可視化と進捗把握",
      "コストの算出",
      "設計品質の比較",
      "サーバ台数の決定"
    ],
    answer: "残作業量の可視化と進捗把握",
    explanation: "バーンダウンチャートは残タスク量の推移をグラフ化しスプリントの進捗確認に使われる。"
  },
  {
    question: "“コードレビュー”の主な効果はどれか。",
    choices: [
      "バグや設計ミスの早期発見・ナレッジ共有",
      "顧客満足度の向上",
      "マーケティング戦略の決定",
      "ネットワーク監視"
    ],
    answer: "バグや設計ミスの早期発見・ナレッジ共有",
    explanation: "複数人でコードを確認し、品質とチーム知識の向上を図ります。"
  },
  {
    question: "“CI（継続的インテグレーション）”の利点はどれか。",
    choices: [
      "早期に不具合を検出し手戻りを減らす",
      "開発メンバーの出席管理をする",
      "全ての作業を手作業で行う",
      "リリースの頻度を下げる"
    ],
    answer: "早期に不具合を検出し手戻りを減らす",
    explanation: "CIは頻繁に統合・ビルド・テストを繰り返し、問題の早期発見・品質向上を実現。"
  },
  {
    question: "“テスト自動化”の主なメリットはどれか。",
    choices: [
      "繰り返しテストの効率化と品質向上",
      "設計作業の短縮",
      "営業コストの削減",
      "サポート窓口の効率化"
    ],
    answer: "繰り返しテストの効率化と品質向上",
    explanation: "自動化によりテスト漏れ防止やリグレッションテスト効率化が図れる。"
  },
  {
    question: "“デバッグ”の定義はどれか。",
    choices: [
      "ソフトウェアのバグを発見し修正する作業",
      "プロジェクトの計画策定",
      "仕様書のレビュー",
      "要件定義の合意"
    ],
    answer: "ソフトウェアのバグを発見し修正する作業",
    explanation: "バグの検出・分析・修正を行う工程をデバッグと呼びます。"
  },
  {
    question: "“バージョン管理システム（VCS）”の主な目的はどれか。",
    choices: [
      "ソースコードや文書の変更履歴管理と共同開発の効率化",
      "ネットワークトラフィックの監視",
      "テストケースの作成",
      "顧客管理"
    ],
    answer: "ソースコードや文書の変更履歴管理と共同開発の効率化",
    explanation: "VCSは変更履歴の保存・分岐・統合・共同作業などを実現する。"
  },
  {
    question: "“リファクタリング”の説明として最も適切なものはどれか。",
    choices: [
      "動作は変えずにソースコードを整理・最適化する",
      "機能を追加すること",
      "設計書を改訂すること",
      "テスト仕様書を作成すること"
    ],
    answer: "動作は変えずにソースコードを整理・最適化する",
    explanation: "リファクタリングは保守性や可読性向上のためのソース改善です。"
  },
  {
    question: "“テストカバレッジ”とは何を示すか。",
    choices: [
      "テストで網羅されたソースコードの割合",
      "テスト仕様書のページ数",
      "バグ数の合計",
      "納品物の数"
    ],
    answer: "テストで網羅されたソースコードの割合",
    explanation: "カバレッジはどれだけコードがテストで実行されたかを示す指標。"
  },
  {
    question: "“不具合管理表”で最も重要な項目はどれか。",
    choices: [
      "不具合内容・発生条件・修正状況など",
      "作成者の年齢",
      "営業目標",
      "テスト実施日"
    ],
    answer: "不具合内容・発生条件・修正状況など",
    explanation: "不具合管理表は問題の追跡・管理に必須の項目です。"
  },
  {
    question: "“リリース判定会議”の目的はどれか。",
    choices: [
      "製品やシステムがリリース可能かどうかを決定する",
      "社内イベントの開催",
      "営業活動の開始時期を決める",
      "障害対応の割り当て"
    ],
    answer: "製品やシステムがリリース可能かどうかを決定する",
    explanation: "品質や進捗を総合評価し、リリースの可否を最終判断します。"
  },
  {
    question: "“移行計画”に含まれるべき内容はどれか。",
    choices: [
      "現行システムから新システムへのデータ・業務の移行手順",
      "売上予測",
      "新入社員研修内容",
      "開発体制の組織図"
    ],
    answer: "現行システムから新システムへのデータ・業務の移行手順",
    explanation: "移行計画はデータ変換、テスト、ユーザー教育、移行日程等を含む。"
  },
  {
    question: "“ベースライン”の意味として最も適切なものはどれか。",
    choices: [
      "成果物の基準となる確定版",
      "不具合一覧表",
      "開発コストの合計",
      "プログラムコメント"
    ],
    answer: "成果物の基準となる確定版",
    explanation: "ベースラインは以後の変更管理・進捗管理の基準となる。"
  },
  {
    question: "“プロジェクトクロージング”で行うべき活動はどれか。",
    choices: [
      "成果物の納品・反省会・ドキュメント整理など",
      "要件定義の追加",
      "スケジュール再編成",
      "設計作業の再実施"
    ],
    answer: "成果物の納品・反省会・ドキュメント整理など",
    explanation: "クロージングでは成果の引き渡し、教訓整理、文書管理が大切です。"
  }
];
